//ƒê√¢y l√† m·ªôt Redux reducer d√πng ƒë·ªÉ x·ª≠ l√Ω tr·∫°ng th√°i x√°c th·ª±c (authentication) c·ªßa ·ª©ng d·ª•ng,
//bao g·ªìm ƒëƒÉng nh·∫≠p (login) v√† ƒëƒÉng k√Ω (register).

import { LOGIN_FAILURE, LOGIN_REQUEST, LOGIN_SUCCESS, REGISTER_FAILURE, REGISTER_SUCCESS,GET_PROFILE_REQUEST,GET_PROFILE_SUCCESS, REGISTER_REQUEST, SEARCH_USER_SUCCESS } from "./auth.actionType";
//üìå D√≤ng ch·∫£y d·ªØ li·ªáu:
// UI (Giao di·ªán ng∆∞·ªùi d√πng) g·ªçi action
// Khi ng∆∞·ªùi d√πng nh·∫≠p th√¥ng tin ƒëƒÉng nh·∫≠p v√† nh·∫•n n√∫t "ƒêƒÉng nh·∫≠p", m·ªôt action (loginUserAction) s·∫Ω ƒë∆∞·ª£c g·ªçi.
// Action g·ª≠i dispatch ƒë·∫øn reducer
// loginUserAction g·ªçi dispatch({ type: LOGIN_REQUEST }), r·ªìi g·ª≠i request ƒë·∫øn API.
// Reducer c·∫≠p nh·∫≠t state
// Khi nh·∫≠n action LOGIN_REQUEST, reducer ƒë·∫∑t loading = true.
// N·∫øu API tr·∫£ v·ªÅ th√†nh c√¥ng, reducer nh·∫≠n LOGIN_SUCCESS v√† l∆∞u JWT v√†o state.
// N·∫øu c√≥ l·ªói, reducer nh·∫≠n LOGIN_FAIL v√† l∆∞u l·ªói v√†o state.
// UI c·∫≠p nh·∫≠t theo state m·ªõi
// N·∫øu loading = true ‚Üí Hi·ªÉn th·ªã spinner.
// N·∫øu jwt c√≥ gi√° tr·ªã ‚Üí Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang ch√≠nh.
// N·∫øu error c√≥ gi√° tr·ªã ‚Üí Hi·ªÉn th·ªã th√¥ng b√°o l·ªói.
//Gi√° tr·ªã m·∫∑c ƒë·ªãnh (initial state) c·ªßa reducer:
const initialState = {
    jwt: null,
    error: null,
    loading: false,
    user: null,
    searchUser: [],
    
}
export const authReducer = (state = initialState, action) => {
    switch (action.type) {

        case REGISTER_REQUEST:
            return {...state,loading: true,error:null}
            

        case LOGIN_REQUEST:
            //...state: Gi·ªØ nguy√™n c√°c gi√° tr·ªã c≈© c·ªßa state ƒë·ªÉ kh√¥ng l√†m m·∫•t d·ªØ li·ªáu kh√°c.
            //loading: true: ƒê√°nh d·∫•u r·∫±ng qu√° tr√¨nh ƒëƒÉng nh·∫≠p ƒëang di·ªÖn ra (hi·ªÉn th·ªã spinner ho·∫∑c loading UI).
            //error: null: X√≥a b·∫•t k·ª≥ l·ªói n√†o tr∆∞·ªõc ƒë√≥ ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng hi·ªÉn th·ªã l·ªói c≈© khi b·∫Øt ƒë·∫ßu ƒëƒÉng nh·∫≠p.
            return {...state,loading: true,error:null}
        case REGISTER_SUCCESS:
            return {
                ...state,
                jwt: action.payload,
                loading: false,
                error: null
            }
        
        case GET_PROFILE_REQUEST:{
            return {...state,loading:true,error:null}
        }

        case GET_PROFILE_SUCCESS:{
            return {...state,user:action.payload.result,error:null,loading:false}
        }

        case SEARCH_USER_SUCCESS:{
            return {...state,searchUser:action.payload.result,loading:false,error:null}
        }
        
            

        case LOGIN_SUCCESS:
            return {
                ...state,
                jwt: action.payload.jwt,
                loading: false,
            }
        case LOGIN_FAILURE:
            return {
                ...state,
                jwt: null,
                loading: false,
                error: action.payload
            }
        case REGISTER_FAILURE:
            return {
                ...state,
                loading: false,
                error: action.payload
            }
        
        default:
            return state;
    }
}