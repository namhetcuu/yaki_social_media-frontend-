import axios from "axios";
import { API_BASE_URL } from "../../config/api";
import {
  GET_ALL_USERS_REQUEST,
  GET_ALL_USERS_SUCCESS,
  GET_ALL_USERS_FAIL,
  GET_USERS_REQUEST,GET_USERS_SUCCESS,GET_USERS_FAILURE
} from "./user.actionType";

// üîπ C·∫•u h√¨nh Axios
const api = axios.create({
  baseURL: API_BASE_URL,
  headers: { "Content-Type": "application/json" },
});

// üìå L·∫•y token t·ª´ localStorage
const getToken = () => localStorage.getItem("jwt");

// üìå C·∫≠p nh·∫≠t token n·∫øu c√≥
const setAuthHeader = () => {
  const token = getToken();
  if (token) {
    api.defaults.headers.common["Authorization"] = `Bearer ${token}`;
  } else {
    delete api.defaults.headers.common["Authorization"];
  }
};

// üîπ L·∫•y danh s√°ch ng∆∞·ªùi d√πng
export const getStoriesAction = () => async (dispatch) => {
  dispatch({ type: GET_ALL_USERS_REQUEST });
  try {
    setAuthHeader(); // ƒê·∫£m b·∫£o lu√¥n c√≥ token tr∆∞·ªõc khi g·ª≠i y√™u c·∫ßu
    const { data } = await api.get("/users");
    console.log("Danh s√°ch story c·ªßa c√°c user tr·∫£ v·ªÅ:", data); 
    dispatch({ type: GET_ALL_USERS_SUCCESS, payload: data });
  } catch (error) {
    console.error("‚ùå Get Users Error:", error.response?.data?.message || error.message);
    dispatch({ type: GET_ALL_USERS_FAIL, payload: error.message });
  }
};

export const getUsersByIds = (userIds) => async (dispatch, getState) => {
  if (!userIds || userIds.length === 0) return; // ‚õî Kh√¥ng g·ª≠i request n·∫øu userIds r·ªóng
  
  dispatch({ type: GET_USERS_REQUEST });

  try {
    const { auth } = getState();  
    const token = auth?.userToken || localStorage.getItem("jwt"); // ‚úÖ L·∫•y token t·ª´ Redux ho·∫∑c localStorage

    if (!token) {
      throw new Error("Unauthorized: No token provided");
    }

    const config = {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    };

    const { data } = await api.post(`/users/get-by-ids`, { userIds }, config); // ‚úÖ Truy·ªÅn config

    console.log("User details:", data);

    dispatch({ type: GET_USERS_SUCCESS, payload: data });
  } catch (error) {
    console.error("‚ùå Get Users Error:", error.response?.data?.message || error.message);
    dispatch({ type: GET_USERS_FAILURE, payload: error.message });
  }
};

